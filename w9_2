#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Hàm tạo một nút mới với giá trị 'val' và con trỏ 'ptr'
// Cấp phát bộ nhớ động cho nút mới và gán giá trị và con trỏ tiếp theo
Node* createNode(int val, Node* ptr) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = val;
    newNode->next = ptr;
    return newNode;
}

// Hàm thêm một nút mới vào đầu danh sách liên kết
// Gán nút mới làm đầu danh sách (head)
void addToHead(Node** head, int val) {
    *head = createNode(val, *head);
}

// Hàm in ra các phần tử trong danh sách liên kết
// Duyệt qua các nút và in giá trị của chúng
void print(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Hàm tạo một danh sách liên kết hình vòng
// Tìm nút cuối cùng và gán nó trỏ tới đầu danh sách
void createCycleList(Node* head) {
    if (head == NULL) return;
    Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = head;
}

// Hàm di chuyển 'step' bước và in giá trị của phần tử hiện tại, 
// sau đó loại bỏ phần tử hiện tại khỏi danh sách
// Duyệt qua 'step' - 1 bước, in giá trị nút tiếp theo, sau đó cập nhật lại danh sách
void move(Node** head, int step) {
    for (int i = 1; i < step; ++i) {
        *head = (*head)->next;
    }
    printf("%d ", (*head)->next->data);
    (*head)->next = (*head)->next->next;
    *head = (*head)->next;
}

// Hàm giải quyết bài toán, sử dụng các hàm trên
// Tạo danh sách liên kết hình vòng, sau đó di chuyển và xóa các phần tử
void solve(Node** head, int n, int m) {
    createCycleList(*head);
    int step;
    while (n > 1) {
        step = m % n;
        if (step == 0) {
            step = n;
        }
        move(head, step);
        n--;
    }
    printf("%d\n", (*head)->data);
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);

    Node* list = NULL;
    // Thêm các phần tử vào đầu danh sách liên kết theo thứ tự ngược lại
    for (int i = n; i > 0; i--) {
        addToHead(&list, i);
    }

    print(list); // In ra danh sách
    solve(&list, n, m); // Giải quyết bài toán

    return 0;
}